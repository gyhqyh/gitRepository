<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<!--
        闭包的作用

1. 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)
2. 让函数外部可以操作(读写)到函数内部的数据(变量/函数)

问题:
  1. 函数执行完后, 函数内部声明的局部变量是否还存在?
  todo 函数内部的变量是不是被内部函数所引用，产生闭包
  2. 在函数外部能直接访问函数内部的局部变量吗?
  todo 可以利用闭包间接 调用
-->
<script>
    function foo() {
        var a = 1, b
        function bar() {
            console.log(a++)// 引用变量
        }
        return bar
    }
    var f = foo()
    /*函数调用 此时函数中的变量foo中的局部变量b被销毁了 a还活着
    * a活着是因为变量 bar 对应的 函数对象没有成为垃圾对象  bar也被销毁了
    * */
    f()
    f()
    f = null 
    /*a 被销毁 f 对应的对象为垃圾对象 */
</script>

<script>
    function foo() {
        /*函数一进来应该就做了好多晒*/
        var a = 1, b
        var bar = function () {
            /*这样写闭包是在函数执行到给变量赋值（
            也就是说一定是 函数对象在 堆 空间被创建的时候产生了闭包）
            的时候  才创建了闭包*/
            console.log(a++)
        }
        return bar
    }
    var f = foo()
    f()
    f()
    f()
    f = null
    //函数对象成为垃圾对象的时候 闭包对象死亡（闭包指的是 包含外部函数变量、函数的对象----》非js对象）
    
    
    
</script>
</body>
</html>



<template>
  <div class="wapper" v-if="table_data[0]">
    <table ref="ta">
      <tr>
        <td :colspan="table_data[1].length">{{table_data[0]}}</td>
      </tr>
      <tr>
        <td v-for="(item,index1) in table_data[1]" :key="index1">{{item}}</td>
      </tr>
      <!--
      index2 是最外层的第几组的定位信息
        华润信托 华能信托 竖
      index3 是确定 某一组 中小组信息
        广西 国开 总计   竖
      index4 是确定 某一小组第几个的信息
       横
      -->

      <template v-for="(item_group,index2) in split_data">
        <tr v-for="(item,index3) in item_group">
          <td v-for="(item1,index4) in item"
              @click="handle_cli(index2, index3, index4)"
              @mouseover="handle_over"
              @mouseout="handle_out"
              @keyup="handle_keyup">{{item1 | fil_num}}</td>
        </tr>
      </template>
      <tr>
        <td v-for="(item,index) in table_data[table_data.length-1]">{{item | fil_num}}</td>
      </tr>
    </table>
  </div>
</template>

<script>
    import axios from 'axios'
    export default {
      name: "ed-ta",
      data () {
          return {
            table_data: [],
            curr_value:  ''
          }
      },
      methods : {
        handle_cli (index1,index2,index3) {
          //  1.收集当前的值
          this.curr_value = event.target.textContent
          /*这个应该不用干别的就好*/
          //2. 清空输入
          event.target.textContent= ''
          console.log(this.curr_value ,index1,index2,index3,this.split_data,99999999999999)
        },
        handle_keyup (index1,index2,index3) {
          //  1.时时收集用户输入的值
          this.curr_value = event.target.textContent
          //值已经收取到了
          console.log(1)
        },
        /*应该是可以干掉的*/
        handle_over () {
          console.log(Number(event.target.textContent))
          /*如果内容能被Number转换为数字，则才可以是可以被编辑的 应该是不用设置false*/
          if (Number(event.target.textContent)){
            event.target.setAttribute('contentEditable','true')
          }
        },
        handle_out (index1,index2,index3) {
         /* event.target.setAttribute('contentEditable','false')*/
       /*   if (this.curr_value) {
              this.table_data[2 + index1]
          }*/
          if (this.curr_value !== '') {
            this.table_data[2][0].splice(4,1,this.curr_value)
            event.target.textContent = this.curr_value
            this.curr_value == ''
          }
        },
        _midd (arr) {

          let a = this.$refs.ta
        /*  a.setAttribute('rowspan',num)
          a.style.verticalAlign = 'middle'*/
        /*todo 分组合并 跨行*/
          for (let i = 0; i < arr.length; i++) {
            /*选中某一组中的第一行的第一个td*/
            let td_node = a.querySelector(`tr:nth-child(${arr[i][0] + 1}) td`)
            td_node.setAttribute('rowspan',arr[i][1])
            td_node.style.verticalAlign = 'middle'
          }
          /*todo 最后一项合并 跨列*/
          a.querySelector('tr:last-child td').setAttribute('colspan','2')
        }
      },
      mounted () {
          axios.get('/table2')
            .then(res  => {
              this.table_data = res.data
              console.log(this.table_data)

              /*执行跟dom有关的操作*/
              this.$nextTick(function () {

               let a = res.data,arr = []
               let flag_data = a[1].length
               let b = 2, c = 0
               for (let i = 2; i < a.length - 1; i++) {
                 b += c
                 c= a[i].length
                 /*b :指的是 某一组的首行，华润信托 c ： 表示的是该组 元素的个数*/
                 arr.push([b, c])
               }
               this._midd(arr)
                console.log(arr,8888888)
              })
            })
            .catch(err => {
              console.log(err)
            })
      },
      computed : {
        split_data () {
          let {table_data} = this
          let arr = []
          arr = table_data.slice(2,table_data.length - 1)
          return arr
        }
      },
      filters : {
        fil_num (value) {
          if(!Number(value)) {
            return value
          } else {
            return Number(value).toFixed(2).replace(/\d{1,3}(?=(\d{3})+(\.\d*)?$)/g,'$&,')
          }
        }
      }
    }
</script>

<style scoped>
.wapper table td {
  min-width: 80px;
 /* min-height: 20px; 不管用*/
  border: 1px solid;
  /*高度只能通过 它来控制 我没想过设置为block*/
  line-height: 1.5;
  /*点击时候，页面动了 变高了 设置一个高度来解决*/
  height: 36px;
}
</style>
4.
Mock.mock('/table2',[
  '资产负债表',
  [
    '信托公司','信托产品','信托公司','信托公司','信托公司','信托公司','信托公司','信托公司','信托公司','统计',
  ],
  [
    ['华润信托','广西',1,1,1,1,1,1,1,7],
    ['国开',2,2,2,2,2,2,2,14],
    ['总计',3,3,3,3,3,3,3,21]
  ],
  [
    ['华能信托','陕西',1,1,1,1,1,1,1,7],
    ['山西',2,2,2,2,2,2,2,14],
    ['四川',3,3,3,3,3,3,3,21],
    ['总计',6,6,6,6,6,6,6,42]
  ],
  ['总计',9,9,9,9,9,9,9,63]

])
