<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<!--
        闭包的作用

1. 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)
2. 让函数外部可以操作(读写)到函数内部的数据(变量/函数)

问题:
  1. 函数执行完后, 函数内部声明的局部变量是否还存在?
  todo 函数内部的变量是不是被内部函数所引用，产生闭包
  2. 在函数外部能直接访问函数内部的局部变量吗?
  todo 可以利用闭包间接 调用
-->
<script>
    function foo() {
        var a = 1, b
        function bar() {
            console.log(a++)// 引用变量
        }
        return bar
    }
    var f = foo()
    /*函数调用 此时函数中的变量foo中的局部变量b被销毁了 a还活着
    * a活着是因为变量 bar 对应的 函数对象没有成为垃圾对象  bar也被销毁了
    * */
    f()
    f()
    f = null 
    /*a 被销毁 f 对应的对象为垃圾对象 */
</script>

<script>
    function foo() {
        /*函数一进来应该就做了好多晒*/
        var a = 1, b
        var bar = function () {
            /*这样写闭包是在函数执行到给变量赋值（
            也就是说一定是 函数对象在 堆 空间被创建的时候产生了闭包）
            的时候  才创建了闭包*/
            console.log(a++)
        }
        return bar
    }
    var f = foo()
    f()
    f()
    f()
    f = null
    //函数对象成为垃圾对象的时候 闭包对象死亡（闭包指的是 包含外部函数变量、函数的对象----》非js对象）
    
    
    
</script>
</body>
</html>
