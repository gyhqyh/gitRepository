props 父传递给子信息 
如果props传递的是引用类型 会达到父子同步变换的情况，应该尽量避免 object arrary
对于props style、class 会采取合并处理  type= date 会破坏 组件内部的type= text  对于非props的属性传递 都会被添加到组件的根元素上面

上面说的是props 也是属性操作  还有就是绑定事件@input.native = 'bar' 手动将外界事件绑定到 组件的跟元素上面 @input = 'bar'这样是挷到了哪里？

在说一说自定义事件 组件内部向外部抛数据应该都是采用这种途径（引用类型）

slot 插槽就是可以将 父组件传输一部分 html内容 （这段内容能帮事件吗？ 原生事件、自定义事件）

禁用特性继承
Vue.component('my-component', {
  inheritAttrs: false,
  // ...
})
这尤其适合配合实例的 $attrs 属性使用，该属性包含了传递给一个组件的特性名和特性值，例如：

{
  class: 'username-input',
  placeholder: 'Enter your username'
}
有了 inheritAttrs: false 和 $attrs，你就可以手动决定这些特性会被赋予哪个元素。在撰写基础组件的时候是常会用到的：

Vue.component('base-input', {
  inheritAttrs: false,
  props: ['label', 'value'],
  template: `
    <label>
      {{ label }}
      <input
        v-bind="$attrs"   //非props特性，被inheritAttrs 规则避开了装载到 此组件根元素上面
        v-bind:value="value"
        v-on:input="$emit('input', $event.target.value)" // 这里触发父组件的方法，原生、自定义、没有绑定的原生？
      >
    </label>
  `
})
这个模式允许你在使用基础组件的时候更像是使用原始的 HTML 元素，而不会担心哪个元素是真正的根元素：

<base-input
  v-model="username"
  class="username-input"
  placeholder="Enter your username"
></base-input>

v-model  等于两个事 使用










一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：

Vue.component('base-checkbox', {
  model: {
    prop: 'checked',
    event: 'change'
  },
  props: {
    checked: Boolean
  },
  template: `
    <input
      type="checkbox"
      v-bind:checked="checked"
      v-on:change="$emit('change', $event.target.checked)"
    >
  `
})
现在在这个组件上使用 v-model 的时候：

<base-checkbox v-model="lovingVue"></base-checkbox>
这里的 lovingVue 的值将会传入这个名为 checked 的 prop。同时当 <base-checkbox> 触发一个 change 事件并附带一个新的值的时候，这个 lovingVue 的属性将会被更新。

注意你仍然需要在组件的 props 选项里声明 checked 这个 prop。
