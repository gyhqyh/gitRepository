 actions: {
    // 用户名登录
    LoginByUsername({ commit }, userInfo) {
      const username = userInfo.username.trim()
      return new Promise((resolve, reject) => {
        loginByUsername(username, userInfo.password).then(response => {
          const data = response.data
          commit('SET_TOKEN', data.token)
          setToken(response.data.token)
          resolve()
        }).catch(error => {
          reject(error)
        })
      })
    },
}


//页面
 handleLogin() {
      this.$refs.loginForm.validate(valid => {
        if (valid) {
          this.loading = true
          this.$store.dispatch('LoginByUsername', this.loginForm).then(() => {
            this.loading = false
            this.$router.push({ path: '/' })
          }).catch(() => {
            this.loading = false
          })
        } else {
          console.log('error submit!!')
          return false
        }
      })
    },
    
    
    promise使得页面和vuex关联在一起了，就是页面是搜集用户名和密码，点击事件触发 this.$store.dispath('login',{}).them(function(data
    ){}).catch(function(err){}) 当action发完请求的时候调用resolve或者reject页面就会知道
    
    和我之前用穿一个页面中的函数要好的多，虽然两者的效果差不多，但是明显后者更为优雅
