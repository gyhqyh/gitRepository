ROUTER DEMO INDEX

const files = require.context('.', true, /\.js$/)

var configArray = []
console.log(files, 'router gouzi')
files.keys().forEach((key) => {
  if (key === './index.js') return
  configArray = configArray.concat(files(key).default)
})
export default configArray


import Frame from '@views/partials/Frame'

export default [{
  path: '/demo',
  component: Frame,
 // fullpath: 'demo',
  // isHideInMenu: true,
  meta: {
    title: '示例模块'
  },
  children: [
    {
      path: 'form',
      fullpath: '/demo/form',
      isHideInMenu: false,
      meta: {
        title: '示例表单',
        ignoreAuth: true
      },
      component: resolve => require(['@views/demo/Form'], resolve)
    },
    {
      path: 'list',
      fullpath: '/demo/list',
      meta: {
        title: '示例列表',
        ignoreAuth: true
      },
      component: resolve => require(['@views/demo/List'], resolve)
    }
  ]
}]
JIANQUAN
/*
* 路由跳转权限控制
*/
import { $auth } from '@helper'

// 不重定向白名单
const whiteList = ['/login', '/regist']

export default {
  // Check login status
  checkLoginAuth (to, from, next) {
    if (whiteList.indexOf(to.path) !== -1) {
      next()
    } else if (to.meta && to.meta.ignoreAuth) {
      next()
    } else {
      if ($auth.checkSession()) {
        next()
      } else {
        next({
          path: '/login'
        })
      }
    }
  },

  // TODO Check page permissions
  checkPageAuth (to, from, next) {
    if (to.meta && to.meta.ignoreAuth) {
      next()
    } else {
      // Check user auth ....
      next()
    }
  }
}
TONGYONG
import NotFound from '@views/errorPage/404'
export default [
  {
    path: '/login',
    meta: {
      title: '登录',
      ignoreAuth: true
    },
    component: resolve => require(['@views/login/login'], resolve)
  },
  {
    path: '/',
    redirect: '/login'
  },
  // 通用路由配置
  {
    path: '*',
    meta: {
      title: 'Page Not Found',
      ignoreAuth: true
    },
    component: NotFound
  }
]
ROUTER INDEX
import Vue from 'vue'
import Router from 'vue-router'
import beforeEachHooks from './beforeEachHooks'
import RoutesMapConfig from './routes'
import commonRoutesMap from './commonRoutes'

Vue.use(Router)

const routerInstance = new Router({
  mode: 'history',
  /* ~~~~~~~~~~~~~~~~~~~~~~~~@CHANGE@~~~~~~~~~~~~~~~~~~~~~~~~ */
  /*
    @desc: base,应用的基路径;如整个单页应用服务在 /app/ 下，base 就应该设为 "/app/";
    @reference: https://router.vuejs.org/zh-cn/api/options.html#base
  */
  base: '/',
  linkActiveClass: 'active',
  scrollBehavior: () => ({ y: 0 }),
  routes: RoutesMapConfig.concat(commonRoutesMap)
})

Object.values(beforeEachHooks).forEach((hook) => {
  routerInstance.beforeEach(hook)
})

export default routerInstance




AXIOS
/*eslint-disable */
import axios from 'axios'
import $q from 'q'
import { $utils } from '@helper'

function requestHandle (params) {
  let defer = $q.defer()
  // console.log('ajax.js 1')
  axios(params)
    .then(res => {
      // console.log('ajax.js then', res)
/*  if (res && (res.unauthorized || res.statusCode === 401)) {
    window.location.href = '/login'
  }
  if (res.type === 'application/x-msdownload') {
    redirectToIframe(res.request.responseURL)
} else*/
      if (res.data) {
        // console.log('ajax.js res.data',res.data)
        if (res.data.success) {
          // console.log('ajax.js success')
          defer.resolve(res.data)
        } else {
          // console.log('ajax.js res.data.message')
          defer.reject(new Error('后台标识success为false'))
        }
      } else {
        defer.reject('没有返回数据')
      }
    }).catch(err => {
      // console.log(err, 'ajax.js catch')
      defer.reject(err)
    })

  return defer.promise
}

function redirectToIframe (url) {
  let iframe = document.createElement('iframe')
  iframe.style.display = 'none'
  iframe.src = url
  iframe.onload = function () {
    document.body.removeChild(iframe)
  }
  document.body.appendChild(iframe)
}

export default {
  post: function (url, params, op) {
    return requestHandle({
      method: 'post',
      url: url,
      data: params
    })
  },
  get: function (url, params, op) {
    return requestHandle({
      method: 'get',
      url: $utils.queryString(url, params)
    })
  }
}
MOCK
const userMap = {
  admin: {
    roles: ['admin'],
    token: 'admin',
    name: 'Admin',
    success: true
  }
}

export default {
  loginByUsername: config => {
    console.log(config.body, 'mock jieshou')
    const { username } = JSON.parse(config.body)
    return userMap[username]
  },
  getUserInfo: config => {
    const { token } = JSON.parse(config.url)
    if (userMap[token]) {
      return userMap[token]
    } else {
      return false
    }
  },
  logout: () => 'success'
}
